// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/gophermart/service/service.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/gophermart/service/service.go -destination=internal/app/gophermart/mocks/mock_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/atinyakov/go-musthave-diploma/internal/app/gophermart/models"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockRepository) CreateOrder(arg0 context.Context, arg1 models.Order) (*models.Order, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockRepositoryMockRecorder) CreateOrder(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockRepository)(nil).CreateOrder), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), arg0, arg1)
}

// GetOrdersByUsername mocks base method.
func (m *MockRepository) GetOrdersByUsername(ctx context.Context, username string) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByUsername", ctx, username)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByUsername indicates an expected call of GetOrdersByUsername.
func (mr *MockRepositoryMockRecorder) GetOrdersByUsername(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByUsername", reflect.TypeOf((*MockRepository)(nil).GetOrdersByUsername), ctx, username)
}

// GetPasswordHashByUsername mocks base method.
func (m *MockRepository) GetPasswordHashByUsername(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPasswordHashByUsername", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPasswordHashByUsername indicates an expected call of GetPasswordHashByUsername.
func (mr *MockRepositoryMockRecorder) GetPasswordHashByUsername(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasswordHashByUsername", reflect.TypeOf((*MockRepository)(nil).GetPasswordHashByUsername), arg0)
}

// GetUserBalanceAndWithdrawals mocks base method.
func (m *MockRepository) GetUserBalanceAndWithdrawals(ctx context.Context, username string) (float64, float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalanceAndWithdrawals", ctx, username)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(float64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserBalanceAndWithdrawals indicates an expected call of GetUserBalanceAndWithdrawals.
func (mr *MockRepositoryMockRecorder) GetUserBalanceAndWithdrawals(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalanceAndWithdrawals", reflect.TypeOf((*MockRepository)(nil).GetUserBalanceAndWithdrawals), ctx, username)
}

// GetWithdrawalsByUsername mocks base method.
func (m *MockRepository) GetWithdrawalsByUsername(ctx context.Context, username string) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawalsByUsername", ctx, username)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawalsByUsername indicates an expected call of GetWithdrawalsByUsername.
func (mr *MockRepositoryMockRecorder) GetWithdrawalsByUsername(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawalsByUsername", reflect.TypeOf((*MockRepository)(nil).GetWithdrawalsByUsername), ctx, username)
}
