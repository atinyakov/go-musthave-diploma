// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/gophermart/handler/post.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/gophermart/handler/post.go -destination=internal/app/gophermart/mocks/mock_post_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	dto "github.com/atinyakov/go-musthave-diploma/internal/app/gophermart/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockServicePost is a mock of ServicePost interface.
type MockServicePost struct {
	ctrl     *gomock.Controller
	recorder *MockServicePostMockRecorder
	isgomock struct{}
}

// MockServicePostMockRecorder is the mock recorder for MockServicePost.
type MockServicePostMockRecorder struct {
	mock *MockServicePost
}

// NewMockServicePost creates a new mock instance.
func NewMockServicePost(ctrl *gomock.Controller) *MockServicePost {
	mock := &MockServicePost{ctrl: ctrl}
	mock.recorder = &MockServicePostMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicePost) EXPECT() *MockServicePostMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockServicePost) CreateOrder(arg0 int, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockServicePostMockRecorder) CreateOrder(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockServicePost)(nil).CreateOrder), arg0, arg1)
}

// CreateWidthraw mocks base method.
func (m *MockServicePost) CreateWidthraw(arg0 dto.WithdrawalRequest, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWidthraw", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWidthraw indicates an expected call of CreateWidthraw.
func (mr *MockServicePostMockRecorder) CreateWidthraw(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWidthraw", reflect.TypeOf((*MockServicePost)(nil).CreateWidthraw), arg0, arg1)
}

// Login mocks base method.
func (m *MockServicePost) Login(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockServicePostMockRecorder) Login(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockServicePost)(nil).Login), arg0, arg1)
}

// Register mocks base method.
func (m *MockServicePost) Register(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockServicePostMockRecorder) Register(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockServicePost)(nil).Register), arg0, arg1)
}
