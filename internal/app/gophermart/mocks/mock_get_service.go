// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/gophermart/handler/get.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/gophermart/handler/get.go -destination=internal/app/gophermart/mocks/mock_get_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	dto "github.com/atinyakov/go-musthave-diploma/internal/app/gophermart/dto"
	models "github.com/atinyakov/go-musthave-diploma/internal/app/gophermart/models"
	gomock "go.uber.org/mock/gomock"
)

// MockServiceGet is a mock of ServiceGet interface.
type MockServiceGet struct {
	ctrl     *gomock.Controller
	recorder *MockServiceGetMockRecorder
	isgomock struct{}
}

// MockServiceGetMockRecorder is the mock recorder for MockServiceGet.
type MockServiceGetMockRecorder struct {
	mock *MockServiceGet
}

// NewMockServiceGet creates a new mock instance.
func NewMockServiceGet(ctrl *gomock.Controller) *MockServiceGet {
	mock := &MockServiceGet{ctrl: ctrl}
	mock.recorder = &MockServiceGetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceGet) EXPECT() *MockServiceGetMockRecorder {
	return m.recorder
}

// GetBalance mocks base method.
func (m *MockServiceGet) GetBalance(arg0 string) (dto.BalanceResponce, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0)
	ret0, _ := ret[0].(dto.BalanceResponce)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockServiceGetMockRecorder) GetBalance(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockServiceGet)(nil).GetBalance), arg0)
}

// GetOrdersByUsername mocks base method.
func (m *MockServiceGet) GetOrdersByUsername(arg0 string) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByUsername", arg0)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByUsername indicates an expected call of GetOrdersByUsername.
func (mr *MockServiceGetMockRecorder) GetOrdersByUsername(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByUsername", reflect.TypeOf((*MockServiceGet)(nil).GetOrdersByUsername), arg0)
}

// GetWithdrawals mocks base method.
func (m *MockServiceGet) GetWithdrawals(arg0 string) ([]dto.WithdrawalResponseItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawals", arg0)
	ret0, _ := ret[0].([]dto.WithdrawalResponseItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawals indicates an expected call of GetWithdrawals.
func (mr *MockServiceGetMockRecorder) GetWithdrawals(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawals", reflect.TypeOf((*MockServiceGet)(nil).GetWithdrawals), arg0)
}
